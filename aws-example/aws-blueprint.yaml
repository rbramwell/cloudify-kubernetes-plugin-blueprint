###########################################################
# This Blueprint installs the nodecellar application
# on an existing host.
###########################################################

tosca_definitions_version: cloudify_dsl_1_2

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3.1/types.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.3.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3.1/plugin.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.3.1/plugin.yaml
  - types/mongotypes.yaml
  - plugins/kubernetes/plugin.yaml

inputs:

  image:
    description: >
      Image to be used when launching agent VM's

  size:
    description: >
      Size of the agent VM's

  agent_user:
    description: >
      User for connecting to agent VM's

node_templates:

  kubernetes:
    type: cloudify.nodes.Tier

  master_host:
    type: cloudify.aws.nodes.Instance
    properties:
      image_id: { get_input: image }
      instance_type: { get_input: size }
      agent_config:
        user: { get_input: agent_user }
    relationships:
      - target: kubernetes
        type: cloudify.relationships.contained_in
      - target: master_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - type: cloudify.aws.relationships.instance_connected_to_elastic_ip
        target: master_ip

  master_ip:
    type: cloudify.aws.nodes.ElasticIP

  master_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: master_security_group
      description: kubernetes master security group
      rules:
      - ip_protocol: tcp
        from_port: { get_property: [ master, master_port ]}
        to_port: { get_property: [ master, master_port ]}
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 4001
        to_port: 4001
        cidr_ip: 0.0.0.0/0
      - ip_protocol: tcp
        from_port: 3000
        to_port: 3000
        cidr_ip: 0.0.0.0/0

  master:
    type: cloudify.kubernetes.Master
    properties:
      install: true
      install_docker: true
    relationships:
      - type: cloudify.kubernetes.relationships.contained_in_host
        target: master_host

  minion_host:
    type: cloudify.aws.nodes.Instance
    properties:
      image_id: { get_input: image }
      instance_type: { get_input: size }
      agent_config:
        user: { get_input: agent_user }
    relationships:
      - target: master_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: kubernetes
        type: cloudify.relationships.contained_in

  minion:
    type: cloudify.kubernetes.Node
    properties:
      install_docker: true
    relationships:
      - type: cloudify.kubernetes.relationships.connected_to_master 
        target: master
      - type: cloudify.relationships.contained_in
        target: minion_host

  nodecellar:
    type: cloudify.kubernetes.Microservice
    properties:
#      config:
#        apiVersion: v1
#        kind: Pod
#        metadata:
#          name: nodecellar
#        spec:
#          restartPolicy: Never
#          containers:
#          - name: nodecellar
#            image: dfilppi/nodecellar:v1
#            workingDir: /root/nodecellar-master
#            command: ["../node/bin/node","server.js"]
#            ports:
#            - containerPort: 3000
#              hostPort: 3000
#            hostIP: { get_property: [ master, ip]}
#            env:
#            - name: MONGO_HOST
#              value: { get_input: host_ip }
#            - name: MONGO_PORT
#              value: { concat: ["", { get_property: [ mongod1 , port ]}] }
      config_path: service.yaml
      config_overrides:
        - "['spec']['containers'][0]['env'][0]['value'] = '@{mongod_host,ip}'"
        - { concat: ["['spec']['containers'][0]['env'][1]['value']=","'",{ get_property: [mongod,port]},"'"]}
    relationships:
      - type: cloudify.relationships.contained_in
        target: master_host
      - type: cloudify.kubernetes.relationships.connected_to_master
        target: master
      - type: cloudify.relationships.connected_to
        target: mongod

  mongod_host:
    type:  cloudify.aws.nodes.Instance
    properties:
      image_id: {get_input: image}
      instance_type: {get_input: size}
      agent_config:
        user: { get_input: agent_user }
    relationships:
      - type: cloudify.aws.relationships.instance_connected_to_security_group
        target: mongod_security_group

  mongod_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      resource_id: mongod_security_group
      description: mongod security group
      rules:
        - ip_protocol: tcp
          from_port: { get_property: [ mongod, port ] }
          to_port: { get_property: [ mongod, port ] }
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 28017
          to_port: 28017
          cidr_ip: 0.0.0.0/0

  mongod:
    type: nodecellar.nodes.Mongod
    instances:
      deploy: 1
    properties:
      port: 27400
      rsetname: ''  #no replicas 
    relationships:
      - type: cloudify.relationships.contained_in
        target: mongod_host
    interfaces:
      cloudify.interfaces.lifecycle:
        create: scripts/mongo/install-mongo.sh
        start: scripts/mongo/start-mongo.sh
        configure: scripts/mongo/install-pymongo.sh
        stop: scripts/mongo/stop-mongo.sh

outputs:
  nodecellar_info:
    description: Nodecellar connection info
    value:
      url: {concat: ["http://",{ get_attribute: [ master_ip, aws_resource_id ]},":3000"]}
